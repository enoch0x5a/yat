#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
require_relative "../lib/yat.rb"

require 'getoptlong'

$CHUNK_SIZE = 10000

$EXIT_OK = 0
$EXIT_ECMDLINE = 3
$EXIT_EFAIL = 4

raise "provide api key in lib/yat/config.rb file" if YandexTranslator::Options[:key].nil?

def show_help
  print File.basename(__FILE__, '.rb')
  puts <<-HELP
  --to LANGUAGE [OPTIONS] [file1 .. fileN]

    OPTIONS:
      --help              print this out
      -h

      --to LANGUAGE       LANGUAGE to translate to (e.g. "ru")
      
      --list-languages    prints list of supported languages
      -l                  --to can be specified to get languages translations

      Files are optional: if none given text grabbed from standard input.
      Text can be provided through piped input (e.g. `echo "test" | yat --to af`)

    NOTICE:
    LANGUAGE must be one of https://translate.yandex.ru supported languages
    abbreviations. See --list-languages option.

  HELP
end

def list_languages(translator, quiet, to_lang)

  raise ArgumentError, 
    "list_languages: #{__FILE__}: #{__LINE__}" \
    "wrong argument: #{translator}" \
    unless translator.kind_of? YandexTranslator::GenericTranslator

  res = translator.getLangs(ui: to_lang || 'en')

  unless quiet
    puts <<-EOF

  //====================\\\\
  ||Supported LANGUAGES ||
  \\\\====================//

    EOF
  end

  res["langs"].each { |short, long| puts "#{short}=>#{long} " }
  exit($EXIT_OK)
end

begin
  opts = GetoptLong.new(
    [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
    [ '--to', GetoptLong::REQUIRED_ARGUMENT],
    [ '--list-languages', '-l', GetoptLong::NO_ARGUMENT],
    [ '--quiet', '-q', GetoptLong::NO_ARGUMENT]
  )

  to_lang = nil
  list_languages = false
  quiet = false

  opts.each { |opt, arg| 
    case opt
    when '--help'
      show_help
      exit($EXIT_OK)
    when '--list-languages'
      list_languages = true
    when '--to'
      to_lang = arg
    when '--quiet'
      quiet = true
    end
  }

  if to_lang.nil?
    raise GetoptLong::MissingArgument, "Please, specify language for output" 
  end

  translator = YandexTranslator::JSONTranslator.new

  if list_languages
    list_languages(translator, quiet, to_lang)
  end
  
  str = String.new

  ARGF.each_line do |line|
    while str.length + line.length > $CHUNK_SIZE
      str, line = str + line[0, $CHUNK_SIZE], line[$CHUNK_SIZE - str.length, line.length]
      $stdout << translator.translate(text: str, lang: to_lang)
      str.clear
    end
      str += line
  end
  $stdout << translator.translate(text: str, lang: to_lang) unless str.empty?

rescue GetoptLong::MissingArgument, GetoptLong::InvalidOption
  $stderr.puts
  show_help
  exit($EXIT_ECMDLINE)

rescue YandexTranslator::ReturnCodeException => exc
  $stderr.print "Error: "
  $stderr.puts exc.message
  exit($EXIT_EFAIL)

rescue Errno::ENOENT => exc
  $stderr.puts exc.message
  exit($EXIT_ECMDLINE)
end
