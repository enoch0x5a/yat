#!/usr/bin/env ruby
require 'yat.rb'
require 'yaml'
require 'getoptlong'

CHUNK_SIZE = 10000

$EXIT_OK = 0
$EXIT_ECMDLINE = 3
$EXIT_EFAIL = 4

# Celluloid.logger = nil

def show_help
  print File.basename(__FILE__, '.rb')
  puts <<-HELP
  --to LANGUAGE [OPTIONS] [file1 .. fileN]

    OPTIONS:
      --help                print this out
      -h

      --quiet               turns off additional output

      --to LANGUAGE         LANGUAGE to translate to (e.g. "ru")
      
      --list-languages      prints list of supported languages
      -l                    --to can be specified to get languages translations

      --key KEY             yandex translator api key
      -k KEY

      --make-config [FILE]  generate YAML config
      -m [FILE]             if FILE not given, but -c option provided, it's argument
                            used instead
      
      --config FILE         read in config from FILE
      -c FILE

      Files are optional: if none given text grabbed from standard input.
      Text can be provided through piped input (e.g. `echo "test" | yat --to af`)

    NOTICE:
    LANGUAGE must be one of https://translate.yandex.ru supported languages
    abbreviations. See --list-languages option.

  HELP

end

def get_languages(translator, quiet, to_lang)
  res = translator.get_languages(ui: to_lang || 'en')
  res["langs"].each { |short, long| puts "#{short}=>#{long} " }
end

begin
  opts = GetoptLong.new(
    [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
    [ '--to', GetoptLong::REQUIRED_ARGUMENT],
    [ '--list-languages', '-l', GetoptLong::NO_ARGUMENT],
    [ '--quiet', '-q', GetoptLong::NO_ARGUMENT],
    [ '--key', '-k', GetoptLong::REQUIRED_ARGUMENT],
    [ '--make-config', '-m', GetoptLong::OPTIONAL_ARGUMENT],
    [ '--config', '-c', GetoptLong::REQUIRED_ARGUMENT]
  )

  to_lang = nil
  list_languages = false
  quiet = false
  key = nil
  make_config = false
  config_file = nil
  new_config = nil

  opts.each { |opt, arg|
    case opt
    when '--help'
      show_help
      exit($EXIT_OK)
    when '--key'
      key = arg
    when '--make-config'
      make_config = true
      new_config = arg
    when '--config'
      config_file = arg
    when '--list-languages'
      list_languages = true
    when '--to'
      to_lang = arg
    when '--quiet'
      quiet = true
    end
  }

  unless config_file.nil?
    YandexTranslator.configuration = YAML.load(File.read(config_file))
    YandexTranslator.configuration.api_key = key unless key.nil?
  else
    YandexTranslator.configure.api_key = key
    
  end
  
  raise GetoptLong::MissingArgument, "Please, specify api key" if YandexTranslator.configuration.api_key.nil?

  if make_config
    Dir.mkdir(new_config_dir) unless new_config.nil? || Dir.exist?(new_config_dir = File.dirname(new_config))

    new_config = config_file if new_config.nil? || new_config.empty?
    
    File.open(new_config || config_file, "w") { |file|
      file.write(YAML.dump(YandexTranslator.configuration))
    }
  end

  if to_lang.nil? && !list_languages
    raise GetoptLong::MissingArgument, "Please, specify language for output" 
  end
  
  translator = YandexTranslator::Yat.new
  if list_languages
    get_languages(translator, quiet, to_lang)
    exit($EXIT_OK)
  end
  
  str = String.new

  ARGF.each_line do |line|
    $stdout << translator.translate(text: line, lang: to_lang)["text"]
  end

rescue GetoptLong::MissingArgument, GetoptLong::InvalidOption => exc
  $stderr.puts exc.message
  show_help
  exit($EXIT_ECMDLINE)

rescue Celluloid::TaskTerminated => exc
  $stderr.puts "!Error: #{exc.message}"
  exit($EXIT_EFAIL)

rescue Errno::ENOENT => exc
  $stderr.puts exc.message
  exit($EXIT_ECMDLINE)
end
